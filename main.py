import asyncio
import logging
import os
from datetime import datetime, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiohttp.web_app import Application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_GROUP_ID = os.getenv('ADMIN_GROUP_ID', '-7367401537')
WEBHOOK_HOST = os.getenv('RENDER_EXTERNAL_URL', 'https://your-app.onrender.com')
WEBHOOK_PATH = f'/webhook/{BOT_TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–∂–∏–¥–∞—é—Ç –ª–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞–º)
waiting_for_admin_message = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# –§–æ—Ä–º–∞—Ç: {message_id_–æ—Ç_–±–æ—Ç–∞_–≤_–∞–¥–º–∏–Ω_—á–∞—Ç–µ: user_id}
admin_message_to_user = {}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    'total_users': set(),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    'messages_today': 0,   # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    'messages_this_week': 0,  # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
    'daily_messages': defaultdict(int),  # –ü–æ –¥–Ω—è–º
    'start_time': datetime.now()  # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
}

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def update_stats(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    now = datetime.now()
    today = now.date()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
    stats['total_users'].add(user_id)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    stats['daily_messages'][today] += 1
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    stats['messages_today'] = stats['daily_messages'][today]
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
    week_ago = today - timedelta(days=7)
    stats['messages_this_week'] = sum(
        count for date, count in stats['daily_messages'].items() 
        if date >= week_ago
    )
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–∏–∫")],
            [KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∞–º")]
        ],
        resize_keyboard=True,  # –ü–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
        one_time_keyboard=False,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        persistent=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
    )
    return keyboard

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if message.chat.type != 'private':
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_stats(message.from_user.id)
        
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command('stats'))
async def stats_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∞)
    is_admin = (
        str(message.chat.id) == ADMIN_GROUP_ID or  # –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
        str(message.from_user.id) == ADMIN_GROUP_ID.replace('-', '')  # –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
    )
    
    if not is_admin:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    uptime = datetime.now() - stats['start_time']
    uptime_str = f"{uptime.days} –¥–Ω. {uptime.seconds // 3600} —á. {(uptime.seconds % 3600) // 60} –º–∏–Ω."
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    recent_days = []
    for i in range(6, -1, -1):  # –û—Ç 6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ —Å–µ–≥–æ–¥–Ω—è
        day = datetime.now().date() - timedelta(days=i)
        count = stats['daily_messages'].get(day, 0)
        day_name = "–°–µ–≥–æ–¥–Ω—è" if i == 0 else f"{day.strftime('%d.%m')}"
        recent_days.append(f"  {day_name}: {count}")
    
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {len(stats['total_users'])}
üì® **–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è:** {stats['messages_today']}
üìà **–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é:** {stats['messages_this_week']}

üìÖ **–ü–æ –¥–Ω—è–º:**
{chr(10).join(recent_days)}

‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime_str}
üöÄ **–ó–∞–ø—É—â–µ–Ω:** {stats['start_time'].strftime('%d.%m.%Y %H:%M')}"""
    
    await message.answer(stats_text, parse_mode='Markdown')

@dp.message(lambda message: message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–∏–∫")
async def send_file_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–∏–∫'"""
    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if message.chat.type != 'private':
        return
        
    await message.answer(
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–∏–∫, –Ω–∞–¥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç—É: —Å—Å—ã–ª–∫–∞. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç ‚ú®",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∞–º")
async def contact_admin_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∞–º'"""
    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if message.chat.type != 'private':
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    waiting_for_admin_message[message.from_user.id] = True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_stats(message.from_user.id)
        
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –∫–∞–∫ —Å–º–æ–≥—É—Ç ‚úçÔ∏è. "
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ —Å–≤–æ–π @–Ω–∏–∫–Ω–µ–π–º",
        reply_markup=get_main_keyboard()
    )

@dp.message()
async def message_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ –∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if str(message.chat.id) == ADMIN_GROUP_ID and message.reply_to_message and message.reply_to_message.from_user.id == bot.id:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        original_message_id = message.reply_to_message.message_id
        target_user_id = admin_message_to_user.get(original_message_id)
        
        if target_user_id:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    chat_id=target_user_id,
                    text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–æ–≤:\n\n{message.text}",
                    reply_markup=get_main_keyboard()
                )
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
                await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
                
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —ç–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å)
                del admin_message_to_user[original_message_id]
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        return
    
    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if waiting_for_admin_message.get(user_id, False):
        # –£–±–∏—Ä–∞–µ–º –ø–æ–º–µ—Ç–∫—É
        waiting_for_admin_message[user_id] = False
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}"
            if message.from_user.username:
                user_info += f" (@{message.from_user.username})"
            user_info += f"\nüÜî ID: {message.from_user.id}"
            
            admin_message = f"{user_info}\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {ADMIN_GROUP_ID}")
            result = await bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=admin_message
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            admin_message_to_user[result.message_id] = user_id
            
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {result.message_id}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º!",
                reply_markup=get_main_keyboard()
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

async def on_startup():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {WEBHOOK_URL}")
    await bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)

async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
    await bot.delete_webhook()
    await bot.session.close()

async def health_check(request):
    """Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return web.Response(text="Bot is running!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setup_application(app, dp, bot=bot)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    app.on_startup.append(lambda app: asyncio.create_task(on_startup()))
    app.on_shutdown.append(lambda app: asyncio.create_task(on_shutdown()))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv('PORT', 10000))
    logging.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(app, host='0.0.0.0', port=port)

if __name__ == '__main__':
    main()
